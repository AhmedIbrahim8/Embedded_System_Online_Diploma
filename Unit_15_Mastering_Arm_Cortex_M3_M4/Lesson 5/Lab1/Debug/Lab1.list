
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001108  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800129c  0800129c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800129c  0800129c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800129c  0800129c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800129c  0800129c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800129c  0800129c  0001129c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012a0  080012a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080012a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000008  080012ac  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080012ac  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022a8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009d0  00000000  00000000  000222e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000398  00000000  00000000  00022cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000300  00000000  00000000  00023048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00001450  00000000  00000000  00023348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001609  00000000  00000000  00024798  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00025da1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000bc0  00000000  00000000  00025e1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001284 	.word	0x08001284

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08001284 	.word	0x08001284

080001d4 <MEXTI_voidInterruptSetPort>:
/********************************************************************************************/
/************************************** APIs Definition *************************************/
/********************************************************************************************/

void MEXTI_voidInterruptSetPort(EXTI_LineType Line,EXTI_SourceInputType SourceInput)
{
 80001d4:	b490      	push	{r4, r7}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	71bb      	strb	r3, [r7, #6]
	SYSCFG->EXTICR[Line/BIT_NUMBER_4] = ( SYSCFG->EXTICR[Line/BIT_NUMBER_4] \
 80001e4:	4a13      	ldr	r2, [pc, #76]	; (8000234 <MEXTI_voidInterruptSetPort+0x60>)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	089b      	lsrs	r3, r3, #2
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	3302      	adds	r3, #2
 80001ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			                          &~(INTERRUPT_CONFIGURATION_REGISTER_MASK<<((Line%BIT_NUMBER_4)*BIT_NUMBER_4)) ) \
 80001f2:	79fa      	ldrb	r2, [r7, #7]
 80001f4:	f002 0203 	and.w	r2, r2, #3
 80001f8:	0092      	lsls	r2, r2, #2
 80001fa:	210f      	movs	r1, #15
 80001fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000200:	43d2      	mvns	r2, r2
 8000202:	4013      	ands	r3, r2
			                          | ( SourceInput<<((Line%BIT_NUMBER_4)*BIT_NUMBER_4) );
 8000204:	79b9      	ldrb	r1, [r7, #6]
 8000206:	79fa      	ldrb	r2, [r7, #7]
 8000208:	f002 0203 	and.w	r2, r2, #3
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	4614      	mov	r4, r2
	SYSCFG->EXTICR[Line/BIT_NUMBER_4] = ( SYSCFG->EXTICR[Line/BIT_NUMBER_4] \
 8000214:	4907      	ldr	r1, [pc, #28]	; (8000234 <MEXTI_voidInterruptSetPort+0x60>)
 8000216:	79fa      	ldrb	r2, [r7, #7]
 8000218:	0892      	lsrs	r2, r2, #2
 800021a:	b2d2      	uxtb	r2, r2
 800021c:	4610      	mov	r0, r2
			                          | ( SourceInput<<((Line%BIT_NUMBER_4)*BIT_NUMBER_4) );
 800021e:	ea43 0204 	orr.w	r2, r3, r4
	SYSCFG->EXTICR[Line/BIT_NUMBER_4] = ( SYSCFG->EXTICR[Line/BIT_NUMBER_4] \
 8000222:	1c83      	adds	r3, r0, #2
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bc90      	pop	{r4, r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40013800 	.word	0x40013800

08000238 <MEXTI_voidInterruptEnableDisable>:
void MEXTI_voidInterruptEnableDisable(EXTI_LineType Line,EXTI_MaskType MaskType)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	4613      	mov	r3, r2
 8000246:	71bb      	strb	r3, [r7, #6]
	switch(MaskType)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d002      	beq.n	8000254 <MEXTI_voidInterruptEnableDisable+0x1c>
 800024e:	2b01      	cmp	r3, #1
 8000250:	d00b      	beq.n	800026a <MEXTI_voidInterruptEnableDisable+0x32>
	case EXTI_DISABLE:
		CLEAR_BIT(EXTI->IMR,Line);
		break;

	}
}
 8000252:	e016      	b.n	8000282 <MEXTI_voidInterruptEnableDisable+0x4a>
		SET_BIT(EXTI->IMR,Line);
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MEXTI_voidInterruptEnableDisable+0x58>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	2101      	movs	r1, #1
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	4611      	mov	r1, r2
 8000262:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <MEXTI_voidInterruptEnableDisable+0x58>)
 8000264:	430b      	orrs	r3, r1
 8000266:	6013      	str	r3, [r2, #0]
		break;
 8000268:	e00b      	b.n	8000282 <MEXTI_voidInterruptEnableDisable+0x4a>
		CLEAR_BIT(EXTI->IMR,Line);
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <MEXTI_voidInterruptEnableDisable+0x58>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	43d2      	mvns	r2, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a05      	ldr	r2, [pc, #20]	; (8000290 <MEXTI_voidInterruptEnableDisable+0x58>)
 800027c:	400b      	ands	r3, r1
 800027e:	6013      	str	r3, [r2, #0]
		break;
 8000280:	bf00      	nop
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40013c00 	.word	0x40013c00

08000294 <MEXTI_voidInterruptTrigger>:

void MEXTI_voidInterruptTrigger(EXTI_LineType Line,EXTI_EdgeType EdgeType)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
	switch(EdgeType)
 80002a4:	79bb      	ldrb	r3, [r7, #6]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d00f      	beq.n	80002ca <MEXTI_voidInterruptTrigger+0x36>
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d018      	beq.n	80002e0 <MEXTI_voidInterruptTrigger+0x4c>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d000      	beq.n	80002b4 <MEXTI_voidInterruptTrigger+0x20>
	case EXTI_ONCHANGE:
		SET_BIT(EXTI->RTSR,Line);
		SET_BIT(EXTI->FTSR,Line);
		break;
	default:
		break;
 80002b2:	e02a      	b.n	800030a <MEXTI_voidInterruptTrigger+0x76>
		SET_BIT(EXTI->RTSR,Line);
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MEXTI_voidInterruptTrigger+0x84>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	79fa      	ldrb	r2, [r7, #7]
 80002ba:	2101      	movs	r1, #1
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	4611      	mov	r1, r2
 80002c2:	4a15      	ldr	r2, [pc, #84]	; (8000318 <MEXTI_voidInterruptTrigger+0x84>)
 80002c4:	430b      	orrs	r3, r1
 80002c6:	6093      	str	r3, [r2, #8]
		break;
 80002c8:	e01f      	b.n	800030a <MEXTI_voidInterruptTrigger+0x76>
		SET_BIT(EXTI->FTSR,Line);
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <MEXTI_voidInterruptTrigger+0x84>)
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	2101      	movs	r1, #1
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <MEXTI_voidInterruptTrigger+0x84>)
 80002da:	430b      	orrs	r3, r1
 80002dc:	60d3      	str	r3, [r2, #12]
		break;
 80002de:	e014      	b.n	800030a <MEXTI_voidInterruptTrigger+0x76>
		SET_BIT(EXTI->RTSR,Line);
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <MEXTI_voidInterruptTrigger+0x84>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	79fa      	ldrb	r2, [r7, #7]
 80002e6:	2101      	movs	r1, #1
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <MEXTI_voidInterruptTrigger+0x84>)
 80002f0:	430b      	orrs	r3, r1
 80002f2:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI->FTSR,Line);
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MEXTI_voidInterruptTrigger+0x84>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	79fa      	ldrb	r2, [r7, #7]
 80002fa:	2101      	movs	r1, #1
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4a05      	ldr	r2, [pc, #20]	; (8000318 <MEXTI_voidInterruptTrigger+0x84>)
 8000304:	430b      	orrs	r3, r1
 8000306:	60d3      	str	r3, [r2, #12]
		break;
 8000308:	bf00      	nop
	}

}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40013c00 	.word	0x40013c00

0800031c <MEXTI_voidSetCallBack>:
{
	SET_BIT(EXTI->SWIER,Line);
}

void MEXTI_voidSetCallBack(EXTI_LineType Line,void (*ptr)(void))
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	6039      	str	r1, [r7, #0]
 8000326:	71fb      	strb	r3, [r7, #7]
	if(Line < EXTI_NUMBER_16)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b0f      	cmp	r3, #15
 800032c:	d804      	bhi.n	8000338 <MEXTI_voidSetCallBack+0x1c>
	{
		Global_EXTIPtr[Line]=ptr;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	4904      	ldr	r1, [pc, #16]	; (8000344 <MEXTI_voidSetCallBack+0x28>)
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	else
	{
		/* DO Nothing */
	}
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	20000024 	.word	0x20000024

08000348 <EXTI0_IRQHandler>:

/* ISR of the external interrupt 0 */
void EXTI0_IRQHandler(void){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	if(Global_EXTIPtr[EXTI_LINE_0] == 0){
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <EXTI0_IRQHandler+0x24>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <EXTI0_IRQHandler+0x12>
		/* Do Nothing */
		/* call back function not initialized */
	}
	else
	{
		Global_EXTIPtr[EXTI_LINE_0]();
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI0_IRQHandler+0x24>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4798      	blx	r3
	}
	/* Clear the pending bit by setting it to one */
	SET_BIT(EXTI->PR,EXTI_LINE_0);
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <EXTI0_IRQHandler+0x28>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <EXTI0_IRQHandler+0x28>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6153      	str	r3, [r2, #20]
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000024 	.word	0x20000024
 8000370:	40013c00 	.word	0x40013c00

08000374 <EXTI1_IRQHandler>:

/* ISR of the external interrupt 1 */
void EXTI1_IRQHandler(void){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	if(Global_EXTIPtr[EXTI_LINE_1] == 0){
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <EXTI1_IRQHandler+0x24>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <EXTI1_IRQHandler+0x12>
		/* Do Nothing */
		/* call back function not initialized */
	}
	else
	{
		Global_EXTIPtr[EXTI_LINE_1]();
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <EXTI1_IRQHandler+0x24>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4798      	blx	r3
	}
	/* Clear the pending bit by setting it to one */
	SET_BIT(EXTI->PR,EXTI_LINE_1);
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI1_IRQHandler+0x28>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI1_IRQHandler+0x28>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	6153      	str	r3, [r2, #20]
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000024 	.word	0x20000024
 800039c:	40013c00 	.word	0x40013c00

080003a0 <EXTI2_IRQHandler>:



/* ISR of the external interrupt 2 */
void EXTI2_IRQHandler(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	if(Global_EXTIPtr[EXTI_LINE_2] == 0){
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <EXTI2_IRQHandler+0x24>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <EXTI2_IRQHandler+0x12>
		/* Do Nothing */
		/* call back function not initialized */
	}
	else
	{
		Global_EXTIPtr[EXTI_LINE_2]();
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <EXTI2_IRQHandler+0x24>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	4798      	blx	r3
	}
	/* Clear the pending bit by setting it to one */
	SET_BIT(EXTI->PR,EXTI_LINE_2);
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <EXTI2_IRQHandler+0x28>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <EXTI2_IRQHandler+0x28>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6153      	str	r3, [r2, #20]
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000024 	.word	0x20000024
 80003c8:	40013c00 	.word	0x40013c00

080003cc <EXTI3_IRQHandler>:

/* ISR of the external interrupt 3 */
void EXTI3_IRQHandler(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	if(Global_EXTIPtr[EXTI_LINE_3] == 0){
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <EXTI3_IRQHandler+0x24>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d002      	beq.n	80003de <EXTI3_IRQHandler+0x12>
		/* Do Nothing */
		/* call back function not initialized */
	}
	else
	{
		Global_EXTIPtr[EXTI_LINE_3]();
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <EXTI3_IRQHandler+0x24>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	4798      	blx	r3
	}
	/* Clear the pending bit by setting it to one */
	SET_BIT(EXTI->PR,EXTI_LINE_3);
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <EXTI3_IRQHandler+0x28>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <EXTI3_IRQHandler+0x28>)
 80003e4:	f043 0308 	orr.w	r3, r3, #8
 80003e8:	6153      	str	r3, [r2, #20]
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000024 	.word	0x20000024
 80003f4:	40013c00 	.word	0x40013c00

080003f8 <EXTI4_IRQHandler>:




/* ISR of the external interrupt 4 */
void EXTI4_IRQHandler(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	if(Global_EXTIPtr[EXTI_LINE_4] == 0){
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <EXTI4_IRQHandler+0x24>)
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <EXTI4_IRQHandler+0x12>
		/* Do Nothing */
		/* call back function not initialized */
	}
	else
	{
		Global_EXTIPtr[EXTI_LINE_4]();
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <EXTI4_IRQHandler+0x24>)
 8000406:	691b      	ldr	r3, [r3, #16]
 8000408:	4798      	blx	r3
	}
	/* Clear the pending bit by setting it to one */
	SET_BIT(EXTI->PR,EXTI_LINE_4);
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <EXTI4_IRQHandler+0x28>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a04      	ldr	r2, [pc, #16]	; (8000420 <EXTI4_IRQHandler+0x28>)
 8000410:	f043 0310 	orr.w	r3, r3, #16
 8000414:	6153      	str	r3, [r2, #20]
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000024 	.word	0x20000024
 8000420:	40013c00 	.word	0x40013c00

08000424 <EXTI9_5_IRQHandler>:



/* ISR of the external interrupt 5 to 9 */
void EXTI9_5_IRQHandler()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	/* In case of External Interrupt line 5 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_5)==1)
 8000428:	4b33      	ldr	r3, [pc, #204]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	095b      	lsrs	r3, r3, #5
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b01      	cmp	r3, #1
 8000434:	d10d      	bne.n	8000452 <EXTI9_5_IRQHandler+0x2e>
	{
		if(Global_EXTIPtr[EXTI_LINE_5] == 0){
 8000436:	4b31      	ldr	r3, [pc, #196]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d01d      	beq.n	800047a <EXTI9_5_IRQHandler+0x56>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_5]();
 800043e:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_5);
 8000444:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a2b      	ldr	r2, [pc, #172]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6153      	str	r3, [r2, #20]
 8000450:	e013      	b.n	800047a <EXTI9_5_IRQHandler+0x56>
		}

	}
	/* In case of External Interrupt line 6 is happened */
	else if(GET_BIT(EXTI->PR,EXTI_LINE_6)==1)
 8000452:	4b29      	ldr	r3, [pc, #164]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	099b      	lsrs	r3, r3, #6
 8000458:	f003 0301 	and.w	r3, r3, #1
 800045c:	2b01      	cmp	r3, #1
 800045e:	d10c      	bne.n	800047a <EXTI9_5_IRQHandler+0x56>
	{
		if(Global_EXTIPtr[EXTI_LINE_6] == 0){
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d008      	beq.n	800047a <EXTI9_5_IRQHandler+0x56>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_6]();
 8000468:	4b24      	ldr	r3, [pc, #144]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_6);
 800046e:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 8000474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000478:	6153      	str	r3, [r2, #20]
		}

	}
	/* In case of External Interrupt line 7 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_7)==1)
 800047a:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	09db      	lsrs	r3, r3, #7
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	2b01      	cmp	r3, #1
 8000486:	d10c      	bne.n	80004a2 <EXTI9_5_IRQHandler+0x7e>
	{
		if(Global_EXTIPtr[EXTI_LINE_7] == 0){
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI9_5_IRQHandler+0x7e>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_7]();
 8000490:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_7);
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 800049c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a0:	6153      	str	r3, [r2, #20]
		}

	}
	/* In case of External Interrupt line 8 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_8)==1)
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	0a1b      	lsrs	r3, r3, #8
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d10c      	bne.n	80004ca <EXTI9_5_IRQHandler+0xa6>
	{
		if(Global_EXTIPtr[EXTI_LINE_8] == 0){
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d008      	beq.n	80004ca <EXTI9_5_IRQHandler+0xa6>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_8]();
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_5);
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	6153      	str	r3, [r2, #20]
		}

	}
	/* In case of External Interrupt line 9 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_9)==1)
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	0a5b      	lsrs	r3, r3, #9
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d10c      	bne.n	80004f2 <EXTI9_5_IRQHandler+0xce>
	{
		if(Global_EXTIPtr[EXTI_LINE_9] == 0){
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 80004da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d008      	beq.n	80004f2 <EXTI9_5_IRQHandler+0xce>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_9]();
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <EXTI9_5_IRQHandler+0xd8>)
 80004e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e4:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_9);
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <EXTI9_5_IRQHandler+0xd4>)
 80004ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f0:	6153      	str	r3, [r2, #20]
		}

	}

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40013c00 	.word	0x40013c00
 80004fc:	20000024 	.word	0x20000024

08000500 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	/* In case of External Interrupt line 10 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_10)==1)
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	0a9b      	lsrs	r3, r3, #10
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	2b01      	cmp	r3, #1
 8000510:	d10d      	bne.n	800052e <EXTI15_10_IRQHandler+0x2e>
	{
		if(Global_EXTIPtr[EXTI_LINE_10] == 0){
 8000512:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 8000514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000516:	2b00      	cmp	r3, #0
 8000518:	d01d      	beq.n	8000556 <EXTI15_10_IRQHandler+0x56>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_10]();
 800051a:	4b39      	ldr	r3, [pc, #228]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 800051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051e:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_10);
 8000520:	4b36      	ldr	r3, [pc, #216]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052a:	6153      	str	r3, [r2, #20]
 800052c:	e013      	b.n	8000556 <EXTI15_10_IRQHandler+0x56>
		}

	}
	/* In case of External Interrupt line 11 is happened */
	else if(GET_BIT(EXTI->PR,EXTI_LINE_11)==1)
 800052e:	4b33      	ldr	r3, [pc, #204]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	0adb      	lsrs	r3, r3, #11
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	2b01      	cmp	r3, #1
 800053a:	d10c      	bne.n	8000556 <EXTI15_10_IRQHandler+0x56>
	{
		if(Global_EXTIPtr[EXTI_LINE_11] == 0){
 800053c:	4b30      	ldr	r3, [pc, #192]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 800053e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000540:	2b00      	cmp	r3, #0
 8000542:	d008      	beq.n	8000556 <EXTI15_10_IRQHandler+0x56>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_11]();
 8000544:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 8000546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000548:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_11);
 800054a:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a2b      	ldr	r2, [pc, #172]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000554:	6153      	str	r3, [r2, #20]
		}

	}
	/* In case of External Interrupt line 12 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_12)==1)
 8000556:	4b29      	ldr	r3, [pc, #164]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	0b1b      	lsrs	r3, r3, #12
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b01      	cmp	r3, #1
 8000562:	d10c      	bne.n	800057e <EXTI15_10_IRQHandler+0x7e>
	{
		if(Global_EXTIPtr[EXTI_LINE_12] == 0){
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	2b00      	cmp	r3, #0
 800056a:	d008      	beq.n	800057e <EXTI15_10_IRQHandler+0x7e>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_12]();
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_12);
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a21      	ldr	r2, [pc, #132]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800057c:	6153      	str	r3, [r2, #20]
		}

	}
	/* In case of External Interrupt line 13 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_13)==1)
 800057e:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	0b5b      	lsrs	r3, r3, #13
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b01      	cmp	r3, #1
 800058a:	d10c      	bne.n	80005a6 <EXTI15_10_IRQHandler+0xa6>
	{
		if(Global_EXTIPtr[EXTI_LINE_13] == 0){
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 800058e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <EXTI15_10_IRQHandler+0xa6>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_13]();
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 8000596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000598:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_13);
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a17      	ldr	r2, [pc, #92]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 80005a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005a4:	6153      	str	r3, [r2, #20]
		}

	}
	/* In case of External Interrupt line 14 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_14)==1)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	0b9b      	lsrs	r3, r3, #14
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d10c      	bne.n	80005ce <EXTI15_10_IRQHandler+0xce>
	{
		if(Global_EXTIPtr[EXTI_LINE_14] == 0){
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 80005b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d008      	beq.n	80005ce <EXTI15_10_IRQHandler+0xce>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_14]();
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 80005be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005c0:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_14);
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 80005c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005cc:	6153      	str	r3, [r2, #20]
		}

	}
	/* In case of External Interrupt line 15 is happened */
	if(GET_BIT(EXTI->PR,EXTI_LINE_15)==1)
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	0bdb      	lsrs	r3, r3, #15
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d10c      	bne.n	80005f6 <EXTI15_10_IRQHandler+0xf6>
	{
		if(Global_EXTIPtr[EXTI_LINE_15] == 0){
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 80005de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d008      	beq.n	80005f6 <EXTI15_10_IRQHandler+0xf6>
			/* Do Nothing */
			/* call back function not initialized */
		}
		else
		{
			Global_EXTIPtr[EXTI_LINE_15]();
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <EXTI15_10_IRQHandler+0x100>)
 80005e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e8:	4798      	blx	r3
			/* Clear the pending bit by setting it to one */
			SET_BIT(EXTI->PR,EXTI_LINE_15);
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <EXTI15_10_IRQHandler+0xfc>)
 80005f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f4:	6153      	str	r3, [r2, #20]
		}

	}
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40013c00 	.word	0x40013c00
 8000600:	20000024 	.word	0x20000024

08000604 <MGPIO_SetMode>:
      00: Input (reset state)
      01: General purpose output mode
      10: Alternate function mode
      11: Analog mode                                                                      */
void MGPIO_SetMode(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8PinMode)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	460b      	mov	r3, r1
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	4613      	mov	r3, r2
 8000614:	717b      	strb	r3, [r7, #5]
	/* Reference Manual Page 148 (8.3.1 General-purpose I/O (GPIO))             */
	/* Check for the debug pins because we can't change the logic of those bits */
	if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d108      	bne.n	800062e <MGPIO_SetMode+0x2a>
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	2b0d      	cmp	r3, #13
 8000620:	d04f      	beq.n	80006c2 <MGPIO_SetMode+0xbe>
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	2b0e      	cmp	r3, #14
 8000626:	d04c      	beq.n	80006c2 <MGPIO_SetMode+0xbe>
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	2b0f      	cmp	r3, #15
 800062c:	d049      	beq.n	80006c2 <MGPIO_SetMode+0xbe>
	{
		/* Do No thing */
	}
	else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d105      	bne.n	8000640 <MGPIO_SetMode+0x3c>
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d045      	beq.n	80006c6 <MGPIO_SetMode+0xc2>
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d042      	beq.n	80006c6 <MGPIO_SetMode+0xc2>
		/* Do No thing */
	}
	else
	{
		/* Switch Case for the port index to decide which port will be accessed */
		switch(Copy_u8PortIndex)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d017      	beq.n	8000676 <MGPIO_SetMode+0x72>
 8000646:	2b02      	cmp	r3, #2
 8000648:	d028      	beq.n	800069c <MGPIO_SetMode+0x98>
 800064a:	2b00      	cmp	r3, #0
 800064c:	d000      	beq.n	8000650 <MGPIO_SetMode+0x4c>
			GPIOC->MODER = ( GPIOC->MODER &~(GPIO_MODE_MASK<<(Copy_u8PinIndex*2)) ) | (Copy_u8PinMode << (Copy_u8PinIndex*2));
			break;

		}
	}
}
 800064e:	e03b      	b.n	80006c8 <MGPIO_SetMode+0xc4>
			GPIOA->MODER = ( GPIOA->MODER &~(GPIO_MODE_MASK<<(Copy_u8PinIndex*2)) ) | (Copy_u8PinMode << (Copy_u8PinIndex*2));
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MGPIO_SetMode+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	0052      	lsls	r2, r2, #1
 8000658:	2103      	movs	r1, #3
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	43d2      	mvns	r2, r2
 8000660:	4013      	ands	r3, r2
 8000662:	7979      	ldrb	r1, [r7, #5]
 8000664:	79ba      	ldrb	r2, [r7, #6]
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a19      	ldr	r2, [pc, #100]	; (80006d4 <MGPIO_SetMode+0xd0>)
 8000670:	430b      	orrs	r3, r1
 8000672:	6013      	str	r3, [r2, #0]
			break;
 8000674:	e028      	b.n	80006c8 <MGPIO_SetMode+0xc4>
			GPIOB->MODER = ( GPIOB->MODER &~(GPIO_MODE_MASK<<(Copy_u8PinIndex*2)) ) | (Copy_u8PinMode << (Copy_u8PinIndex*2));
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MGPIO_SetMode+0xd4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	79ba      	ldrb	r2, [r7, #6]
 800067c:	0052      	lsls	r2, r2, #1
 800067e:	2103      	movs	r1, #3
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	43d2      	mvns	r2, r2
 8000686:	4013      	ands	r3, r2
 8000688:	7979      	ldrb	r1, [r7, #5]
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	4611      	mov	r1, r2
 8000694:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <MGPIO_SetMode+0xd4>)
 8000696:	430b      	orrs	r3, r1
 8000698:	6013      	str	r3, [r2, #0]
			break;
 800069a:	e015      	b.n	80006c8 <MGPIO_SetMode+0xc4>
			GPIOC->MODER = ( GPIOC->MODER &~(GPIO_MODE_MASK<<(Copy_u8PinIndex*2)) ) | (Copy_u8PinMode << (Copy_u8PinIndex*2));
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MGPIO_SetMode+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	79ba      	ldrb	r2, [r7, #6]
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	2103      	movs	r1, #3
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	43d2      	mvns	r2, r2
 80006ac:	4013      	ands	r3, r2
 80006ae:	7979      	ldrb	r1, [r7, #5]
 80006b0:	79ba      	ldrb	r2, [r7, #6]
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	fa01 f202 	lsl.w	r2, r1, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <MGPIO_SetMode+0xd8>)
 80006bc:	430b      	orrs	r3, r1
 80006be:	6013      	str	r3, [r2, #0]
			break;
 80006c0:	e002      	b.n	80006c8 <MGPIO_SetMode+0xc4>
	if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
 80006c2:	bf00      	nop
 80006c4:	e000      	b.n	80006c8 <MGPIO_SetMode+0xc4>
	else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
 80006c6:	bf00      	nop
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800

080006e0 <MGPIO_SetOutputPinMode>:
/*    00: Low speed                                                                             */
/*    01: Medium speed                                                                          */
/*    10: High speed                                                                            */
/*    11: Very high speed                                                                       */
void MGPIO_SetOutputPinMode(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8OutputType,u8 Copy_u8Speed)
{
 80006e0:	b490      	push	{r4, r7}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4604      	mov	r4, r0
 80006e8:	4608      	mov	r0, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	4623      	mov	r3, r4
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	4603      	mov	r3, r0
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	460b      	mov	r3, r1
 80006f8:	717b      	strb	r3, [r7, #5]
 80006fa:	4613      	mov	r3, r2
 80006fc:	713b      	strb	r3, [r7, #4]
	/* Reference Manual Page 148 (8.3.1 General-purpose I/O (GPIO))             */
	/* Check for the debug pins because we can't change the logic of those bits */
	if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d108      	bne.n	8000716 <MGPIO_SetOutputPinMode+0x36>
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	2b0d      	cmp	r3, #13
 8000708:	d07f      	beq.n	800080a <MGPIO_SetOutputPinMode+0x12a>
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	2b0e      	cmp	r3, #14
 800070e:	d07c      	beq.n	800080a <MGPIO_SetOutputPinMode+0x12a>
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	2b0f      	cmp	r3, #15
 8000714:	d079      	beq.n	800080a <MGPIO_SetOutputPinMode+0x12a>
	{
		/* Do No thing */
	}
	else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d105      	bne.n	8000728 <MGPIO_SetOutputPinMode+0x48>
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d075      	beq.n	800080e <MGPIO_SetOutputPinMode+0x12e>
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b04      	cmp	r3, #4
 8000726:	d072      	beq.n	800080e <MGPIO_SetOutputPinMode+0x12e>
		/* Do No thing */
	}
	else
	{
		/* Switch Case for the port index to decide which port will be accessed */
		switch(Copy_u8PortIndex)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d027      	beq.n	800077e <MGPIO_SetOutputPinMode+0x9e>
 800072e:	2b02      	cmp	r3, #2
 8000730:	d048      	beq.n	80007c4 <MGPIO_SetOutputPinMode+0xe4>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d000      	beq.n	8000738 <MGPIO_SetOutputPinMode+0x58>
					       | (Copy_u8Speed << (Copy_u8PinIndex*2));
			break;

		}
	}
}
 8000736:	e06b      	b.n	8000810 <MGPIO_SetOutputPinMode+0x130>
			GPIOA->OTYPER = ( GPIOA->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 8000738:	4b38      	ldr	r3, [pc, #224]	; (800081c <MGPIO_SetOutputPinMode+0x13c>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	43d2      	mvns	r2, r2
 8000746:	4013      	ands	r3, r2
			              | (Copy_u8OutputType << (Copy_u8PinIndex));
 8000748:	7979      	ldrb	r1, [r7, #5]
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	fa01 f202 	lsl.w	r2, r1, r2
 8000750:	4611      	mov	r1, r2
			GPIOA->OTYPER = ( GPIOA->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 8000752:	4a32      	ldr	r2, [pc, #200]	; (800081c <MGPIO_SetOutputPinMode+0x13c>)
			              | (Copy_u8OutputType << (Copy_u8PinIndex));
 8000754:	430b      	orrs	r3, r1
			GPIOA->OTYPER = ( GPIOA->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 8000756:	6053      	str	r3, [r2, #4]
			GPIOA->OSPEEDR = ( GPIOA->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 8000758:	4b30      	ldr	r3, [pc, #192]	; (800081c <MGPIO_SetOutputPinMode+0x13c>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	2103      	movs	r1, #3
 8000762:	fa01 f202 	lsl.w	r2, r1, r2
 8000766:	43d2      	mvns	r2, r2
 8000768:	4013      	ands	r3, r2
					       | (Copy_u8Speed << (Copy_u8PinIndex*2));
 800076a:	7939      	ldrb	r1, [r7, #4]
 800076c:	79ba      	ldrb	r2, [r7, #6]
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	4611      	mov	r1, r2
			GPIOA->OSPEEDR = ( GPIOA->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <MGPIO_SetOutputPinMode+0x13c>)
					       | (Copy_u8Speed << (Copy_u8PinIndex*2));
 8000778:	430b      	orrs	r3, r1
			GPIOA->OSPEEDR = ( GPIOA->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 800077a:	6093      	str	r3, [r2, #8]
			break;
 800077c:	e048      	b.n	8000810 <MGPIO_SetOutputPinMode+0x130>
			GPIOB->OTYPER = ( GPIOB->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MGPIO_SetOutputPinMode+0x140>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	79ba      	ldrb	r2, [r7, #6]
 8000784:	2101      	movs	r1, #1
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	43d2      	mvns	r2, r2
 800078c:	4013      	ands	r3, r2
			              | (Copy_u8OutputType << (Copy_u8PinIndex));
 800078e:	7979      	ldrb	r1, [r7, #5]
 8000790:	79ba      	ldrb	r2, [r7, #6]
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	4611      	mov	r1, r2
			GPIOB->OTYPER = ( GPIOB->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <MGPIO_SetOutputPinMode+0x140>)
			              | (Copy_u8OutputType << (Copy_u8PinIndex));
 800079a:	430b      	orrs	r3, r1
			GPIOB->OTYPER = ( GPIOB->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 800079c:	6053      	str	r3, [r2, #4]
			GPIOB->OSPEEDR = ( GPIOB->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MGPIO_SetOutputPinMode+0x140>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	0052      	lsls	r2, r2, #1
 80007a6:	2103      	movs	r1, #3
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	43d2      	mvns	r2, r2
 80007ae:	4013      	ands	r3, r2
					       | (Copy_u8Speed << (Copy_u8PinIndex*2));
 80007b0:	7939      	ldrb	r1, [r7, #4]
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	0052      	lsls	r2, r2, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4611      	mov	r1, r2
			GPIOB->OSPEEDR = ( GPIOB->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 80007bc:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MGPIO_SetOutputPinMode+0x140>)
					       | (Copy_u8Speed << (Copy_u8PinIndex*2));
 80007be:	430b      	orrs	r3, r1
			GPIOB->OSPEEDR = ( GPIOB->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 80007c0:	6093      	str	r3, [r2, #8]
			break;
 80007c2:	e025      	b.n	8000810 <MGPIO_SetOutputPinMode+0x130>
			GPIOC->OTYPER = ( GPIOC->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MGPIO_SetOutputPinMode+0x144>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	2101      	movs	r1, #1
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	43d2      	mvns	r2, r2
 80007d2:	4013      	ands	r3, r2
			              | (Copy_u8OutputType << (Copy_u8PinIndex));
 80007d4:	7979      	ldrb	r1, [r7, #5]
 80007d6:	79ba      	ldrb	r2, [r7, #6]
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	4611      	mov	r1, r2
			GPIOC->OTYPER = ( GPIOC->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <MGPIO_SetOutputPinMode+0x144>)
			              | (Copy_u8OutputType << (Copy_u8PinIndex));
 80007e0:	430b      	orrs	r3, r1
			GPIOC->OTYPER = ( GPIOC->OTYPER &~(GPIO_OUTPUT_TYPE_MASK<<(Copy_u8PinIndex)) ) \
 80007e2:	6053      	str	r3, [r2, #4]
			GPIOC->OSPEEDR = ( GPIOC->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MGPIO_SetOutputPinMode+0x144>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	79ba      	ldrb	r2, [r7, #6]
 80007ea:	0052      	lsls	r2, r2, #1
 80007ec:	2103      	movs	r1, #3
 80007ee:	fa01 f202 	lsl.w	r2, r1, r2
 80007f2:	43d2      	mvns	r2, r2
 80007f4:	4013      	ands	r3, r2
					       | (Copy_u8Speed << (Copy_u8PinIndex*2));
 80007f6:	7939      	ldrb	r1, [r7, #4]
 80007f8:	79ba      	ldrb	r2, [r7, #6]
 80007fa:	0052      	lsls	r2, r2, #1
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	4611      	mov	r1, r2
			GPIOC->OSPEEDR = ( GPIOC->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <MGPIO_SetOutputPinMode+0x144>)
					       | (Copy_u8Speed << (Copy_u8PinIndex*2));
 8000804:	430b      	orrs	r3, r1
			GPIOC->OSPEEDR = ( GPIOC->OSPEEDR &~(GPIO_OUTPUT_SPEED_TYPE_MASK<<(Copy_u8PinIndex*2)) ) \
 8000806:	6093      	str	r3, [r2, #8]
			break;
 8000808:	e002      	b.n	8000810 <MGPIO_SetOutputPinMode+0x130>
	if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
 800080a:	bf00      	nop
 800080c:	e000      	b.n	8000810 <MGPIO_SetOutputPinMode+0x130>
	else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
 800080e:	bf00      	nop
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bc90      	pop	{r4, r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40020000 	.word	0x40020000
 8000820:	40020400 	.word	0x40020400
 8000824:	40020800 	.word	0x40020800

08000828 <MGPIO_SetInputPinMode>:
/*   01: Pull-up                                                                                */
/*   10: Pull-down                                                                              */
/*   11: Reserved                                                                               */

void MGPIO_SetInputPinMode(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8InputType)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	460b      	mov	r3, r1
 8000834:	71bb      	strb	r3, [r7, #6]
 8000836:	4613      	mov	r3, r2
 8000838:	717b      	strb	r3, [r7, #5]
	/* Reference Manual Page 148 (8.3.1 General-purpose I/O (GPIO))             */
		/* Check for the debug pins because we can't change the logic of those bits */
		if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d108      	bne.n	8000852 <MGPIO_SetInputPinMode+0x2a>
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	2b0d      	cmp	r3, #13
 8000844:	d04f      	beq.n	80008e6 <MGPIO_SetInputPinMode+0xbe>
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	2b0e      	cmp	r3, #14
 800084a:	d04c      	beq.n	80008e6 <MGPIO_SetInputPinMode+0xbe>
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	2b0f      	cmp	r3, #15
 8000850:	d049      	beq.n	80008e6 <MGPIO_SetInputPinMode+0xbe>
		{
			/* Do No thing */
		}
		else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d105      	bne.n	8000864 <MGPIO_SetInputPinMode+0x3c>
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d045      	beq.n	80008ea <MGPIO_SetInputPinMode+0xc2>
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	2b04      	cmp	r3, #4
 8000862:	d042      	beq.n	80008ea <MGPIO_SetInputPinMode+0xc2>
			/* Do No thing */
		}
		else
		{
			/* Switch Case for the port index to decide which port will be accessed */
			switch(Copy_u8PortIndex)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d017      	beq.n	800089a <MGPIO_SetInputPinMode+0x72>
 800086a:	2b02      	cmp	r3, #2
 800086c:	d028      	beq.n	80008c0 <MGPIO_SetInputPinMode+0x98>
 800086e:	2b00      	cmp	r3, #0
 8000870:	d000      	beq.n	8000874 <MGPIO_SetInputPinMode+0x4c>
				             | (Copy_u8InputType << (Copy_u8PinIndex*2));
				break;

			}
		}
}
 8000872:	e03b      	b.n	80008ec <MGPIO_SetInputPinMode+0xc4>
				GPIOA->PUPDR = ( GPIOA->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MGPIO_SetInputPinMode+0xd0>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	2103      	movs	r1, #3
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	43d2      	mvns	r2, r2
 8000884:	4013      	ands	r3, r2
				             | (Copy_u8InputType << (Copy_u8PinIndex*2));
 8000886:	7979      	ldrb	r1, [r7, #5]
 8000888:	79ba      	ldrb	r2, [r7, #6]
 800088a:	0052      	lsls	r2, r2, #1
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	4611      	mov	r1, r2
				GPIOA->PUPDR = ( GPIOA->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 8000892:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <MGPIO_SetInputPinMode+0xd0>)
				             | (Copy_u8InputType << (Copy_u8PinIndex*2));
 8000894:	430b      	orrs	r3, r1
				GPIOA->PUPDR = ( GPIOA->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 8000896:	60d3      	str	r3, [r2, #12]
				break;
 8000898:	e028      	b.n	80008ec <MGPIO_SetInputPinMode+0xc4>
				GPIOB->PUPDR = ( GPIOB->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MGPIO_SetInputPinMode+0xd4>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	79ba      	ldrb	r2, [r7, #6]
 80008a0:	0052      	lsls	r2, r2, #1
 80008a2:	2103      	movs	r1, #3
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	43d2      	mvns	r2, r2
 80008aa:	4013      	ands	r3, r2
				             | (Copy_u8InputType << (Copy_u8PinIndex*2));
 80008ac:	7979      	ldrb	r1, [r7, #5]
 80008ae:	79ba      	ldrb	r2, [r7, #6]
 80008b0:	0052      	lsls	r2, r2, #1
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	4611      	mov	r1, r2
				GPIOB->PUPDR = ( GPIOB->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <MGPIO_SetInputPinMode+0xd4>)
				             | (Copy_u8InputType << (Copy_u8PinIndex*2));
 80008ba:	430b      	orrs	r3, r1
				GPIOB->PUPDR = ( GPIOB->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 80008bc:	60d3      	str	r3, [r2, #12]
				break;
 80008be:	e015      	b.n	80008ec <MGPIO_SetInputPinMode+0xc4>
				GPIOC->PUPDR = ( GPIOC->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MGPIO_SetInputPinMode+0xd8>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	79ba      	ldrb	r2, [r7, #6]
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	2103      	movs	r1, #3
 80008ca:	fa01 f202 	lsl.w	r2, r1, r2
 80008ce:	43d2      	mvns	r2, r2
 80008d0:	4013      	ands	r3, r2
				             | (Copy_u8InputType << (Copy_u8PinIndex*2));
 80008d2:	7979      	ldrb	r1, [r7, #5]
 80008d4:	79ba      	ldrb	r2, [r7, #6]
 80008d6:	0052      	lsls	r2, r2, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
				GPIOC->PUPDR = ( GPIOC->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <MGPIO_SetInputPinMode+0xd8>)
				             | (Copy_u8InputType << (Copy_u8PinIndex*2));
 80008e0:	430b      	orrs	r3, r1
				GPIOC->PUPDR = ( GPIOC->PUPDR &~(GPIO_PULL_UP_DOWN__MASK<<(Copy_u8PinIndex*2)) ) \
 80008e2:	60d3      	str	r3, [r2, #12]
				break;
 80008e4:	e002      	b.n	80008ec <MGPIO_SetInputPinMode+0xc4>
		if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
 80008e6:	bf00      	nop
 80008e8:	e000      	b.n	80008ec <MGPIO_SetInputPinMode+0xc4>
		else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
 80008ea:	bf00      	nop
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020400 	.word	0x40020400
 8000900:	40020800 	.word	0x40020800

08000904 <MGPIO_SetPinValue>:


/* This Function is responsible :                                                               */
/*                     Set the pin value (LEVEL_LOW,LEVEL_HIGH)                                 */
void MGPIO_SetPinValue(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8Value)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
 800090e:	460b      	mov	r3, r1
 8000910:	71bb      	strb	r3, [r7, #6]
 8000912:	4613      	mov	r3, r2
 8000914:	717b      	strb	r3, [r7, #5]
	/* Reference Manual Page 148 (8.3.1 General-purpose I/O (GPIO))             */
	/* Check for the debug pins because we can't change the logic of those bits */
	if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d108      	bne.n	800092e <MGPIO_SetPinValue+0x2a>
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	2b0d      	cmp	r3, #13
 8000920:	d049      	beq.n	80009b6 <MGPIO_SetPinValue+0xb2>
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	2b0e      	cmp	r3, #14
 8000926:	d046      	beq.n	80009b6 <MGPIO_SetPinValue+0xb2>
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2b0f      	cmp	r3, #15
 800092c:	d043      	beq.n	80009b6 <MGPIO_SetPinValue+0xb2>
	{
		/* Do No thing */
	}
	else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d105      	bne.n	8000940 <MGPIO_SetPinValue+0x3c>
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d03f      	beq.n	80009ba <MGPIO_SetPinValue+0xb6>
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	2b04      	cmp	r3, #4
 800093e:	d03c      	beq.n	80009ba <MGPIO_SetPinValue+0xb6>
		/* Do No thing */
	}
	else
	{
		/* Switch Case for the port index to decide which port will be accessed */
		switch(Copy_u8PortIndex)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d015      	beq.n	8000972 <MGPIO_SetPinValue+0x6e>
 8000946:	2b02      	cmp	r3, #2
 8000948:	d024      	beq.n	8000994 <MGPIO_SetPinValue+0x90>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d000      	beq.n	8000950 <MGPIO_SetPinValue+0x4c>
			GPIOC->ODR = ( GPIOC->ODR &~(GPIO_OUTPUT_DATA_MASK<<(Copy_u8PinIndex)) ) | (Copy_u8Value << (Copy_u8PinIndex));
			break;

		}
}
}
 800094e:	e035      	b.n	80009bc <MGPIO_SetPinValue+0xb8>
			GPIOA->ODR = ( GPIOA->ODR &~(GPIO_OUTPUT_DATA_MASK<<(Copy_u8PinIndex)) ) | (Copy_u8Value << (Copy_u8PinIndex));
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MGPIO_SetPinValue+0xc4>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	79ba      	ldrb	r2, [r7, #6]
 8000956:	2101      	movs	r1, #1
 8000958:	fa01 f202 	lsl.w	r2, r1, r2
 800095c:	43d2      	mvns	r2, r2
 800095e:	4013      	ands	r3, r2
 8000960:	7979      	ldrb	r1, [r7, #5]
 8000962:	79ba      	ldrb	r2, [r7, #6]
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	4611      	mov	r1, r2
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MGPIO_SetPinValue+0xc4>)
 800096c:	430b      	orrs	r3, r1
 800096e:	6153      	str	r3, [r2, #20]
			break;
 8000970:	e024      	b.n	80009bc <MGPIO_SetPinValue+0xb8>
			GPIOB->ODR = ( GPIOB->ODR &~(GPIO_OUTPUT_DATA_MASK<<(Copy_u8PinIndex)) ) | (Copy_u8Value << (Copy_u8PinIndex));
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MGPIO_SetPinValue+0xc8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	79ba      	ldrb	r2, [r7, #6]
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	43d2      	mvns	r2, r2
 8000980:	4013      	ands	r3, r2
 8000982:	7979      	ldrb	r1, [r7, #5]
 8000984:	79ba      	ldrb	r2, [r7, #6]
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	4611      	mov	r1, r2
 800098c:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <MGPIO_SetPinValue+0xc8>)
 800098e:	430b      	orrs	r3, r1
 8000990:	6153      	str	r3, [r2, #20]
			break;
 8000992:	e013      	b.n	80009bc <MGPIO_SetPinValue+0xb8>
			GPIOC->ODR = ( GPIOC->ODR &~(GPIO_OUTPUT_DATA_MASK<<(Copy_u8PinIndex)) ) | (Copy_u8Value << (Copy_u8PinIndex));
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MGPIO_SetPinValue+0xcc>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	79ba      	ldrb	r2, [r7, #6]
 800099a:	2101      	movs	r1, #1
 800099c:	fa01 f202 	lsl.w	r2, r1, r2
 80009a0:	43d2      	mvns	r2, r2
 80009a2:	4013      	ands	r3, r2
 80009a4:	7979      	ldrb	r1, [r7, #5]
 80009a6:	79ba      	ldrb	r2, [r7, #6]
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	4611      	mov	r1, r2
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <MGPIO_SetPinValue+0xcc>)
 80009b0:	430b      	orrs	r3, r1
 80009b2:	6153      	str	r3, [r2, #20]
			break;
 80009b4:	e002      	b.n	80009bc <MGPIO_SetPinValue+0xb8>
	if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
 80009b6:	bf00      	nop
 80009b8:	e000      	b.n	80009bc <MGPIO_SetPinValue+0xb8>
	else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
 80009ba:	bf00      	nop
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020800 	.word	0x40020800

080009d4 <MNVIC_VoidEnbleInterrupt>:
/*           - Enable the NVIC Bit for the specified Peripheral in the Copy_u8IntPos        */
/* Programming Manual Data Sheet Page 210:                                                  */
/*           - Interrupt set-enable register x (NVIC_ISERx)                                 */
/********************************************************************************************/
void MNVIC_VoidEnbleInterrupt(u8 Copy_u8IntPos)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(NVIC->ISER[Copy_u8IntPos/NUMBER_32],Copy_u8IntPos%NUMBER_32);
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <MNVIC_VoidEnbleInterrupt+0x40>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	f002 021f 	and.w	r2, r2, #31
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	4610      	mov	r0, r2
 80009f8:	4906      	ldr	r1, [pc, #24]	; (8000a14 <MNVIC_VoidEnbleInterrupt+0x40>)
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	0952      	lsrs	r2, r2, #5
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	4303      	orrs	r3, r0
 8000a02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <MNVIC_VoidSetInterruptGroupMode>:
/*           - For information about splitting the interrupt priority fields into group     */
/*             priority and subpriority, see Application interrupt and reset control        */
/*             register (AIRCR) on page 228                                                 */
/********************************************************************************************/
void MNVIC_VoidSetInterruptGroupMode(MNVIC_Group_t GroupSubMode)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	GroupMode = GroupSubMode;
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <MNVIC_VoidSetInterruptGroupMode+0x3c>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	7013      	strb	r3, [r2, #0]
	/* On writes, write 0x5FA to VECTKEY, otherwise the write is ignored  */
	/* SCB_AIRCR_VECTKEY_NUMBER = 0x05FA 0000                             */
	u32 Local_u32temp = (SCB_AIRCR &~(SCB_AIRCR_GROUP_MASK)) | (GroupSubMode<<BIT_NUMBER_8) | SCB_AIRCR_VECTKEY_NUMBER;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MNVIC_VoidSetInterruptGroupMode+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	0212      	lsls	r2, r2, #8
 8000a34:	4313      	orrs	r3, r2
 8000a36:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	60fb      	str	r3, [r7, #12]
	SCB_AIRCR = Local_u32temp;
 8000a40:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <MNVIC_VoidSetInterruptGroupMode+0x40>)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000064 	.word	0x20000064
 8000a58:	e000ed0c 	.word	0xe000ed0c

08000a5c <MNVIC_VoidSetInterruptPriority>:
/*           - Adjust the SW Priority of the Specified Peripheral                           */
/* Programming Manual Data Sheet Page 215:                                                  */
/*           - Interrupt set-enable register x (NVIC_ISERx)                                 */
/********************************************************************************************/
void MNVIC_VoidSetInterruptPriority(u8 Copy_u8IntPos,u8 Copy_u8GroupNum,u8 Copy_u8SubGroupNum)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	460b      	mov	r3, r1
 8000a68:	71bb      	strb	r3, [r7, #6]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	717b      	strb	r3, [r7, #5]
	/* Mask the 4-Bits fist to ensure that all 4-bit are zeros before inserting the value   */
	NVIC->IPR[Copy_u8IntPos] = NVIC->IPR[Copy_u8IntPos] & NVIC_IPR_MASK ;
 8000a6e:	4a35      	ldr	r2, [pc, #212]	; (8000b44 <MNVIC_VoidSetInterruptPriority+0xe8>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4413      	add	r3, r2
 8000a74:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4932      	ldr	r1, [pc, #200]	; (8000b44 <MNVIC_VoidSetInterruptPriority+0xe8>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f002 020f 	and.w	r2, r2, #15
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	/* Peripheral Priority Adjusting is based on the global variable GroupMode because      */
	/* Shifting is dependent on it                                                          */
	/* STM32 is using the last 4-bits in the IPR Register                                   */
	/* Note that IPR is byte accessable                                                     */
	switch(GroupMode)
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <MNVIC_VoidSetInterruptPriority+0xec>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3b03      	subs	r3, #3
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d84f      	bhi.n	8000b34 <MNVIC_VoidSetInterruptPriority+0xd8>
 8000a94:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <MNVIC_VoidSetInterruptPriority+0x40>)
 8000a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9a:	bf00      	nop
 8000a9c:	08000ab1 	.word	0x08000ab1
 8000aa0:	08000ac3 	.word	0x08000ac3
 8000aa4:	08000ae3 	.word	0x08000ae3
 8000aa8:	08000b03 	.word	0x08000b03
 8000aac:	08000b23 	.word	0x08000b23
	{
	/* case 1 : No Sub Group, all 4-bits are for the group                 */
	case GROUP_16_SUB_NONE:
		/* Shifting 4 for only the Group Priority          */
		NVIC->IPR[Copy_u8IntPos] = Copy_u8GroupNum << BIT_NUMBER_4;
 8000ab0:	4924      	ldr	r1, [pc, #144]	; (8000b44 <MNVIC_VoidSetInterruptPriority+0xe8>)
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	79ba      	ldrb	r2, [r7, #6]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 8000ac0:	e039      	b.n	8000b36 <MNVIC_VoidSetInterruptPriority+0xda>
	/* case 2 : The first bit in the last 4-bit is for the subgroup        */
	/*          The three bits in the last 4-bit is for the group priority */
	case GROUP_8_SUB_2:
		/* Shifting 5 for only the Group Priority          */
		/* Shifting 4 for only the SubGroup Priority       */
		NVIC->IPR[Copy_u8IntPos] = (Copy_u8GroupNum << BIT_NUMBER_5) | (Copy_u8SubGroupNum <<BIT_NUMBER_4);
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	015b      	lsls	r3, r3, #5
 8000ac6:	b25a      	sxtb	r2, r3
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b259      	sxtb	r1, r3
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MNVIC_VoidSetInterruptPriority+0xe8>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	b2c9      	uxtb	r1, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	460a      	mov	r2, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 8000ae0:	e029      	b.n	8000b36 <MNVIC_VoidSetInterruptPriority+0xda>
	/* case 3 : The first two bit in the last 4-bit is for the subgroup     */
	/*          The two bits in the last 4-bit is for the group priority    */
	case GROUP_4_SUB_4:
		/* Shifting 6 for only the Group Priority          */
		/* Shifting 4 for only the SubGroup Priority       */
		NVIC->IPR[Copy_u8IntPos] = (Copy_u8GroupNum << BIT_NUMBER_6) | (Copy_u8SubGroupNum <<BIT_NUMBER_4);
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	019b      	lsls	r3, r3, #6
 8000ae6:	b25a      	sxtb	r2, r3
 8000ae8:	797b      	ldrb	r3, [r7, #5]
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b259      	sxtb	r1, r3
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <MNVIC_VoidSetInterruptPriority+0xe8>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	b2c9      	uxtb	r1, r1
 8000af8:	4413      	add	r3, r2
 8000afa:	460a      	mov	r2, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 8000b00:	e019      	b.n	8000b36 <MNVIC_VoidSetInterruptPriority+0xda>
	/* case 4 : The first three bit in the last 4-bit is for the subgroup    */
	/*          The bit in the last 4-bit is for the group priority          */
	case GROUP_2_SUB_8:
		/* Shifting 7 for only the Group Priority          */
		/* Shifting 4 for only the SubGroup Priority       */
		NVIC->IPR[Copy_u8IntPos] = (Copy_u8GroupNum << BIT_NUMBER_7) | (Copy_u8SubGroupNum <<BIT_NUMBER_4);
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	01db      	lsls	r3, r3, #7
 8000b06:	b25a      	sxtb	r2, r3
 8000b08:	797b      	ldrb	r3, [r7, #5]
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b259      	sxtb	r1, r3
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <MNVIC_VoidSetInterruptPriority+0xe8>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	b2c9      	uxtb	r1, r1
 8000b18:	4413      	add	r3, r2
 8000b1a:	460a      	mov	r2, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 8000b20:	e009      	b.n	8000b36 <MNVIC_VoidSetInterruptPriority+0xda>
    /* case 5 : No Group, all 4-bits are for the subgroup */
	case GROUP_NONE_SUB_16:
		NVIC->IPR[Copy_u8IntPos] = Copy_u8SubGroupNum << BIT_NUMBER_4;
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <MNVIC_VoidSetInterruptPriority+0xe8>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	797a      	ldrb	r2, [r7, #5]
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 8000b32:	e000      	b.n	8000b36 <MNVIC_VoidSetInterruptPriority+0xda>
	default:
		break;
 8000b34:	bf00      	nop
		/* Do No thing */
	}

}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	20000064 	.word	0x20000064

08000b4c <MRCC_Init>:
/************************************** APIs Definition *************************************/
/********************************************************************************************/


void MRCC_Init(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	/* Switch to HSE Clock */
	RCC->RCC_CFGR = ( RCC->RCC_CFGR & CLOCK_SWITCH_MASK ) | (SWITCH_HSE);
	/* In case of Internal Clock */
#elif (SYS_CLK == RCC_HSI)
	/* Set the HSI ON Bit in the control register */
	SET_BIT(RCC->RCC_CR,CR_HSION);
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MRCC_Init+0x48>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <MRCC_Init+0x48>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
	/* Wait till HSI Ready bit flag equal 1 which means HSI is Ready */
	while(!(GET_BIT(RCC->RCC_CR,CR_HSIRDY)));
 8000b5c:	bf00      	nop
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <MRCC_Init+0x48>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f9      	beq.n	8000b5e <MRCC_Init+0x12>
	/* Switch to HSI Clock */
	RCC->RCC_CFGR = ( RCC->RCC_CFGR & CLOCK_SWITCH_MASK ) | (SWITCH_HSI);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MRCC_Init+0x48>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <MRCC_Init+0x48>)
 8000b70:	f023 0303 	bic.w	r3, r3, #3
 8000b74:	6093      	str	r3, [r2, #8]
	/* Switch to PLL Clock */
	RCC->RCC_CFGR = ( RCC->RCC_CFGR & CLOCK_SWITCH_MASK ) | (SWITCH_PLL);

#endif
	/* Adjust AHB , APB1 , APB2 Clock */
	RCC->RCC_CFGR = (RCC->RCC_CFGR & BUS_PRESCALER_MASK) \
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MRCC_Init+0x48>)
 8000b78:	689b      	ldr	r3, [r3, #8]
			       |(AHB_CLOCK   << HPRE0 )\
 8000b7a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
	RCC->RCC_CFGR = (RCC->RCC_CFGR & BUS_PRESCALER_MASK) \
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <MRCC_Init+0x48>)
				   |(APB1_CLOCK  << PPRE10)\
				   |(APB2_CLOCK  << PPRE20);
 8000b84:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
	RCC->RCC_CFGR = (RCC->RCC_CFGR & BUS_PRESCALER_MASK) \
 8000b88:	6093      	str	r3, [r2, #8]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40023800 	.word	0x40023800

08000b98 <MRCC_Enable_Peripheral>:



/* Function Responsible for : enable the clock for the peripheral */
void MRCC_Enable_Peripheral(u32 Copy_32Address_Bus,u32 Copy_32peripheral)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	/* We have 4 Buses Type which are :        */
	/*    - APB1                               */
	/*    - APB2                               */
	/*    - AHB1                               */
	/*    - AHB2                               */
	switch(Copy_32Address_Bus)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d837      	bhi.n	8000c18 <MRCC_Enable_Peripheral+0x80>
 8000ba8:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <MRCC_Enable_Peripheral+0x18>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bc1 	.word	0x08000bc1
 8000bb4:	08000bd7 	.word	0x08000bd7
 8000bb8:	08000bed 	.word	0x08000bed
 8000bbc:	08000c03 	.word	0x08000c03
	{
	/* In case of APB1 Bus, we access the APB1 Enable Register */
	case RCC_APB1:
		/* Set the peripheral bit to enable the clock for the module */
		SET_BIT(RCC->RCC_APB1ENR,Copy_32peripheral);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MRCC_Enable_Peripheral+0x90>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <MRCC_Enable_Peripheral+0x90>)
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000bd4:	e021      	b.n	8000c1a <MRCC_Enable_Peripheral+0x82>
		/* In case of APB2 Bus, we access the APB1 Enable Register */
	case RCC_APB2:
		/* Set the peripheral bit to enable the clock for the module */
		SET_BIT(RCC->RCC_APB2ENR,Copy_32peripheral);
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MRCC_Enable_Peripheral+0x90>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	2101      	movs	r1, #1
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	fa01 f202 	lsl.w	r2, r1, r2
 8000be2:	4611      	mov	r1, r2
 8000be4:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <MRCC_Enable_Peripheral+0x90>)
 8000be6:	430b      	orrs	r3, r1
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 8000bea:	e016      	b.n	8000c1a <MRCC_Enable_Peripheral+0x82>
		/* In case of AHB1 Bus, we access the APB1 Enable Register */
	case RCC_AHB1:
		/* Set the peripheral bit to enable the clock for the module */
		SET_BIT(RCC->RCC_AHB1ENR,Copy_32peripheral);
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MRCC_Enable_Peripheral+0x90>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <MRCC_Enable_Peripheral+0x90>)
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000c00:	e00b      	b.n	8000c1a <MRCC_Enable_Peripheral+0x82>
		/* In case of AHB2 Bus, we access the APB1 Enable Register */
	case RCC_AHB2:
		/* Set the peripheral bit to enable the clock for the module */
		SET_BIT(RCC->RCC_AHB2ENR,Copy_32peripheral);
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MRCC_Enable_Peripheral+0x90>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	2101      	movs	r1, #1
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <MRCC_Enable_Peripheral+0x90>)
 8000c12:	430b      	orrs	r3, r1
 8000c14:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000c16:	e000      	b.n	8000c1a <MRCC_Enable_Peripheral+0x82>
	default:
		break;
 8000c18:	bf00      	nop
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <SYSTICK_voidInit>:
/********************************************************************************************/
/************************************** APIs Definition *************************************/
/********************************************************************************************/

void SYSTICK_voidInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
        Selects the clock source.
            0: AHB/8
            1: Processor clock (AHB)
     */
	/* SYSTICK_CLOCK_SOURCE_TYPE is #define inside the configuration.h */
	SYSTICK->STK_CTRL = ( SYSTICK->STK_CTRL & SYSTICK_CLOCK_SOURCE_MASK ) |\
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SYSTICK_voidInit+0x1c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <SYSTICK_voidInit+0x1c>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6013      	str	r3, [r2, #0]
			            ( SYSTICK_CLOCK_SOURCE_TYPE << SYSTICK_CLKSOURCE_BIT);

}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <SYSTICK_voidStart>:
	/* Copy_u8State either 0 or 1 */
	SYSTICK->STK_CTRL = (SYSTICK->STK_CTRL & SYSTICK_TICK_INT_MASK) | (Copy_u8State<<SYSTICK_TICKINT_BIT);
}

void SYSTICK_voidStart(u32 Copy_u32LoadValue)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	/* Adjust the reload register before clearing the value register */
	SYSTICK->STK_LOAD = Copy_u32LoadValue & SYSTICK_LOAD_REGISTER_MASK;
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <SYSTICK_voidStart+0x30>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c5c:	6053      	str	r3, [r2, #4]
	SYSTICK->STK_VAL  = 0;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <SYSTICK_voidStart+0x30>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
    /* LOAD register and then counts down. On reaching 0, it sets the COUNTFLAG to 1 and              */
    /* optionally asserts the SysTick depending on the value of TICKINT. It then loads the RELOAD     */
    /* value again, and begins counting.                                                              */
    /*       0: Counter disabled                                                                      */
    /*       1: Counter enabled                                                                       */
	SET_BIT(SYSTICK->STK_CTRL,SYSTICK_ENABLE_BIT);
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SYSTICK_voidStart+0x30>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <SYSTICK_voidStart+0x30>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <SYSTICK_voidDelayMs>:
	SYSTICK->STK_VAL=0;

}

void SYSTICK_voidDelayMs(u32 Copy_u32DelayValue)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	u32 Copy_u32LoadValue;
#if(SYSTICK_CLOCK_SOURCE_TYPE == SYSTICK_PROCESSOR_CLOCK_AHB)
	Copy_u32LoadValue = Copy_u32DelayValue*16000UL;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	60fb      	str	r3, [r7, #12]
	SYSTICK_voidStart(Copy_u32LoadValue);
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f7ff ffd9 	bl	8000c4c <SYSTICK_voidStart>
#elif (SYSTICK_CLOCK_SOURCE_TYPE == SYSTICK_PROCESSOR_CLOCK_AHB_8)
	Copy_u32LoadValue = Copy_u32DelayValue*2000UL;
	SYSTICK_voidStart(Copy_u32LoadValue);
#endif
	while((GET_BIT(SYSTICK->STK_CTRL,SYSTICK_COUNTFLAG_BIT))==0);
 8000c9a:	bf00      	nop
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <SYSTICK_voidDelayMs+0x3c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f9      	beq.n	8000c9c <SYSTICK_voidDelayMs+0x1c>
	SYSTICK->STK_LOAD=0;
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SYSTICK_voidDelayMs+0x3c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
	SYSTICK->STK_VAL=0;
 8000cae:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <SYSTICK_voidDelayMs+0x3c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <SWITCH_CPU_AccessLevel>:
                                                "and r0,r1,r0 \n\t"\
												"msr CONTROL,r0")

#define  OS_Generate_Exception   __asm volatile("SVC #0x3")
void SWITCH_CPU_AccessLevel(CPU_AccessLevel level)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	switch(level)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <SWITCH_CPU_AccessLevel+0x16>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d009      	beq.n	8000ce8 <SWITCH_CPU_AccessLevel+0x28>
		__asm(" mrs r3, CONTROL   \n\t"
			  " orr r3, r3, #0x01 \n\t"
			  " msr CONTROL, r3 ");
		break;
	}
}
 8000cd4:	e00f      	b.n	8000cf6 <SWITCH_CPU_AccessLevel+0x36>
		__asm(" mrs r3,CONTROL    \n\t"
 8000cd6:	f3ef 8314 	mrs	r3, CONTROL
 8000cda:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000cde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce2:	f383 8814 	msr	CONTROL, r3
		break;
 8000ce6:	e006      	b.n	8000cf6 <SWITCH_CPU_AccessLevel+0x36>
		__asm(" mrs r3, CONTROL   \n\t"
 8000ce8:	f3ef 8314 	mrs	r3, CONTROL
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	f383 8814 	msr	CONTROL, r3
		break;
 8000cf4:	bf00      	nop
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <SVC_Handler>:
void func1(void);

void func2(void);

void SVC_Handler()
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
	SWITCH_CPU_AccessLevel(PRIVILEGED);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff ffda 	bl	8000cc0 <SWITCH_CPU_AccessLevel>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <TaskA>:


int TaskA(int a,int b,int c)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	return a+b+c;
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	441a      	add	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <TaskB>:


int TaskB(int a,int b,int c,int d)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	603b      	str	r3, [r7, #0]
	return a+b+c;
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	441a      	add	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <Main_os>:

/* Initialize all stack area for all tasks and initialize the end of the msp
 * MSP size = 512 Bytes
 * */
void Main_os()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	/* Specify the end of the end of the main stack pointer */
	_E_MSP = _S_MSP - 512;
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <Main_os+0xd8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000d64:	4a33      	ldr	r2, [pc, #204]	; (8000e34 <Main_os+0xdc>)
 8000d66:	6013      	str	r3, [r2, #0]

	/* Task A */

	/* The stack area of the task A starts at the end of the MSP by 8 */
	_S_PSP_TA = _E_MSP - 8 ;
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <Main_os+0xdc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3b08      	subs	r3, #8
 8000d6e:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <Main_os+0xe0>)
 8000d70:	6013      	str	r3, [r2, #0]
	/* The end of the task A is the start of task A - the size of the stack
	 * of task A which we will adjust to be 100 bytes */
	_E_PSP_TA = _S_PSP_TA - TaskA_Stack_Size;
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <Main_os+0xe0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3b64      	subs	r3, #100	; 0x64
 8000d78:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <Main_os+0xe4>)
 8000d7a:	6013      	str	r3, [r2, #0]


	/* Task B */

	/* The stack area of the task B starts at the end of the PSP of Task A by 8 */
	_S_PSP_TB = _E_PSP_TA - 8 ;
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <Main_os+0xe4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3b08      	subs	r3, #8
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <Main_os+0xe8>)
 8000d84:	6013      	str	r3, [r2, #0]
	/* The end of the task A is the start of task A - the size of the stack
	 * of task A which we will adjust to be 100 bytes */
	_E_PSP_TB = _S_PSP_TA - TaskB_Stack_Size;
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <Main_os+0xe0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3b64      	subs	r3, #100	; 0x64
 8000d8c:	4a2d      	ldr	r2, [pc, #180]	; (8000e44 <Main_os+0xec>)
 8000d8e:	6013      	str	r3, [r2, #0]


	/* Here, we want to make an simple ideal task */
	while(1)
	{
		__asm("NOP");
 8000d90:	bf00      	nop
		if(TASKA_flag == 1)
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <Main_os+0xf0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d122      	bne.n	8000de0 <Main_os+0x88>
		{
			/* Set PSP Register to _S_PSP_TA */
			OS_SET_PSP(_S_PSP_TA);
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <Main_os+0xe0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f380 8809 	msr	PSP, r0
			/* Adjust the SP to point to PSP */
			OS_SWITCH_SP_TO_PSP;
 8000da4:	f3ef 8014 	mrs	r0, CONTROL
 8000da8:	f04f 0102 	mov.w	r1, #2
 8000dac:	ea41 0000 	orr.w	r0, r1, r0
 8000db0:	f380 8814 	msr	CONTROL, r0
			/* Switch to unprivilleged */
			SWITCH_CPU_AccessLevel(UNPRIVILEGED);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff ff83 	bl	8000cc0 <SWITCH_CPU_AccessLevel>


			TASKA_flag=TaskA(1,2,3);
 8000dba:	2203      	movs	r2, #3
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff ffa6 	bl	8000d10 <TaskA>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <Main_os+0xf0>)
 8000dca:	701a      	strb	r2, [r3, #0]


			/* Switch from unpriv to priv */
			OS_Generate_Exception;
 8000dcc:	df03      	svc	3
			/* Adjust the SP to point to MSP */
			OS_SWITCH_SP_TO_MSP;
 8000dce:	f3ef 8014 	mrs	r0, CONTROL
 8000dd2:	f04f 0105 	mov.w	r1, #5
 8000dd6:	ea01 0000 	and.w	r0, r1, r0
 8000dda:	f380 8814 	msr	CONTROL, r0
 8000dde:	e7d7      	b.n	8000d90 <Main_os+0x38>
		}
		else if(TASKA_flag == 1)
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <Main_os+0xf0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d1d3      	bne.n	8000d90 <Main_os+0x38>
		{
			/* Set PSP Register to _S_PSP_TB */
			OS_SET_PSP(_S_PSP_TB);
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <Main_os+0xe8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f380 8809 	msr	PSP, r0
			/* Adjust the SP to point to PSP */
			OS_SWITCH_SP_TO_PSP;
 8000df2:	f3ef 8014 	mrs	r0, CONTROL
 8000df6:	f04f 0102 	mov.w	r1, #2
 8000dfa:	ea41 0000 	orr.w	r0, r1, r0
 8000dfe:	f380 8814 	msr	CONTROL, r0
			/* Switch to unprivilleged */
			SWITCH_CPU_AccessLevel(UNPRIVILEGED);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff ff5c 	bl	8000cc0 <SWITCH_CPU_AccessLevel>


			TASKB_flag=TaskB(1,2,3,4);
 8000e08:	2304      	movs	r3, #4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff ff8f 	bl	8000d32 <TaskB>
 8000e14:	4603      	mov	r3, r0
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <Main_os+0xf4>)
 8000e1a:	701a      	strb	r2, [r3, #0]

			/* Switch from unpriv to priv */
			OS_Generate_Exception;
 8000e1c:	df03      	svc	3
			/* Adjust the SP to point to MSP */
			OS_SWITCH_SP_TO_MSP;
 8000e1e:	f3ef 8014 	mrs	r0, CONTROL
 8000e22:	f04f 0105 	mov.w	r1, #5
 8000e26:	ea01 0000 	and.w	r0, r1, r0
 8000e2a:	f380 8814 	msr	CONTROL, r0
		__asm("NOP");
 8000e2e:	e7af      	b.n	8000d90 <Main_os+0x38>
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000068 	.word	0x20000068
 8000e38:	20000070 	.word	0x20000070
 8000e3c:	20000080 	.word	0x20000080
 8000e40:	20000074 	.word	0x20000074
 8000e44:	20000078 	.word	0x20000078
 8000e48:	2000006c 	.word	0x2000006c
 8000e4c:	2000007c 	.word	0x2000007c

08000e50 <main>:
	}

}


int main(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	volatile void (*ptr)()=func1;
 8000e56:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <main+0x1c0>)
 8000e58:	607b      	str	r3, [r7, #4]
	MRCC_Init();
 8000e5a:	f7ff fe77 	bl	8000b4c <MRCC_Init>
	MRCC_Enable_Peripheral(RCC_AHB1,RCC_AHB1_GPIOA);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fe99 	bl	8000b98 <MRCC_Enable_Peripheral>
	MRCC_Enable_Peripheral(RCC_AHB1,RCC_AHB1_GPIOB);
 8000e66:	2101      	movs	r1, #1
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff fe95 	bl	8000b98 <MRCC_Enable_Peripheral>
	MRCC_Enable_Peripheral(RCC_APB2,RCC_APB2_SYSCFG);
 8000e6e:	210e      	movs	r1, #14
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff fe91 	bl	8000b98 <MRCC_Enable_Peripheral>

	SYSTICK_voidInit();
 8000e76:	f7ff fed9 	bl	8000c2c <SYSTICK_voidInit>

	MGPIO_SetMode(PORTA,PIN0,GENRAL_PURPOSE_OUTPUT_MODE);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fbc0 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetOutputPinMode(PORTA,PIN0,OUTPUT_PUSH_PULL,OUTPUT_LOW_SPEED_TYPE);
 8000e84:	2300      	movs	r3, #0
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fc28 	bl	80006e0 <MGPIO_SetOutputPinMode>
	MGPIO_SetMode(PORTA,PIN1,GENRAL_PURPOSE_OUTPUT_MODE);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2101      	movs	r1, #1
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fbb5 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetOutputPinMode(PORTA,PIN1,OUTPUT_PUSH_PULL,OUTPUT_LOW_SPEED_TYPE);
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff fc1d 	bl	80006e0 <MGPIO_SetOutputPinMode>
	MGPIO_SetMode(PORTA,PIN2,GENRAL_PURPOSE_OUTPUT_MODE);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fbaa 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetOutputPinMode(PORTA,PIN2,OUTPUT_PUSH_PULL,OUTPUT_LOW_SPEED_TYPE);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fc12 	bl	80006e0 <MGPIO_SetOutputPinMode>
	MGPIO_SetMode(PORTA,PIN3,GENRAL_PURPOSE_OUTPUT_MODE);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fb9f 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetOutputPinMode(PORTA,PIN3,OUTPUT_PUSH_PULL,OUTPUT_LOW_SPEED_TYPE);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2103      	movs	r1, #3
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fc07 	bl	80006e0 <MGPIO_SetOutputPinMode>
	MGPIO_SetMode(PORTA,PIN4,GENRAL_PURPOSE_OUTPUT_MODE);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fb94 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetOutputPinMode(PORTA,PIN4,OUTPUT_PUSH_PULL,OUTPUT_LOW_SPEED_TYPE);
 8000edc:	2300      	movs	r3, #0
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fbfc 	bl	80006e0 <MGPIO_SetOutputPinMode>
	MGPIO_SetMode(PORTA,PIN5,GENRAL_PURPOSE_OUTPUT_MODE);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2105      	movs	r1, #5
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fb89 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetOutputPinMode(PORTA,PIN5,OUTPUT_PUSH_PULL,OUTPUT_LOW_SPEED_TYPE);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2105      	movs	r1, #5
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fbf1 	bl	80006e0 <MGPIO_SetOutputPinMode>
	MGPIO_SetMode(PORTA,PIN6,GENRAL_PURPOSE_OUTPUT_MODE);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2106      	movs	r1, #6
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fb7e 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetOutputPinMode(PORTA,PIN6,OUTPUT_PUSH_PULL,OUTPUT_LOW_SPEED_TYPE);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2106      	movs	r1, #6
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fbe6 	bl	80006e0 <MGPIO_SetOutputPinMode>
	MGPIO_SetMode(PORTA,PIN7,GENRAL_PURPOSE_OUTPUT_MODE);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2107      	movs	r1, #7
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fb73 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetOutputPinMode(PORTA,PIN7,OUTPUT_PUSH_PULL,OUTPUT_LOW_SPEED_TYPE);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2200      	movs	r2, #0
 8000f22:	2107      	movs	r1, #7
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fbdb 	bl	80006e0 <MGPIO_SetOutputPinMode>

	MGPIO_SetPinValue(PORTA,PIN0,GPIO_PIN_LEVEL_LOW);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fce8 	bl	8000904 <MGPIO_SetPinValue>
	MGPIO_SetPinValue(PORTA,PIN1,GPIO_PIN_LEVEL_LOW);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2101      	movs	r1, #1
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fce3 	bl	8000904 <MGPIO_SetPinValue>
	MGPIO_SetPinValue(PORTA,PIN2,GPIO_PIN_LEVEL_LOW);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2102      	movs	r1, #2
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fcde 	bl	8000904 <MGPIO_SetPinValue>
	MGPIO_SetPinValue(PORTA,PIN3,GPIO_PIN_LEVEL_LOW);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fcd9 	bl	8000904 <MGPIO_SetPinValue>
	MGPIO_SetPinValue(PORTA,PIN4,GPIO_PIN_LEVEL_LOW);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2104      	movs	r1, #4
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fcd4 	bl	8000904 <MGPIO_SetPinValue>
	MGPIO_SetPinValue(PORTA,PIN5,GPIO_PIN_LEVEL_LOW);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2105      	movs	r1, #5
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fccf 	bl	8000904 <MGPIO_SetPinValue>
	MGPIO_SetPinValue(PORTA,PIN6,GPIO_PIN_LEVEL_LOW);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2106      	movs	r1, #6
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fcca 	bl	8000904 <MGPIO_SetPinValue>
	MGPIO_SetPinValue(PORTA,PIN7,GPIO_PIN_LEVEL_LOW);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2107      	movs	r1, #7
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fcc5 	bl	8000904 <MGPIO_SetPinValue>


	MGPIO_SetMode(PORTB,PIN0,INPUT_RESET_STATE);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff fb40 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetInputPinMode(PORTB,PIN0,PULL_UP);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2100      	movs	r1, #0
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff fc4d 	bl	8000828 <MGPIO_SetInputPinMode>

	MGPIO_SetMode(PORTB,PIN1,INPUT_RESET_STATE);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2101      	movs	r1, #1
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff fb36 	bl	8000604 <MGPIO_SetMode>
	MGPIO_SetInputPinMode(PORTB,PIN1,PULL_UP);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fc43 	bl	8000828 <MGPIO_SetInputPinMode>

	/* Set Groups and Sub Groups */
	MNVIC_VoidSetInterruptGroupMode(GROUP_2_SUB_8);
 8000fa2:	2006      	movs	r0, #6
 8000fa4:	f7ff fd38 	bl	8000a18 <MNVIC_VoidSetInterruptGroupMode>
	MNVIC_VoidSetInterruptPriority(6,1,0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2101      	movs	r1, #1
 8000fac:	2006      	movs	r0, #6
 8000fae:	f7ff fd55 	bl	8000a5c <MNVIC_VoidSetInterruptPriority>
	MNVIC_VoidSetInterruptPriority(7,0,0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2007      	movs	r0, #7
 8000fb8:	f7ff fd50 	bl	8000a5c <MNVIC_VoidSetInterruptPriority>

//	SWITCH_CPU_AccessLevel(UNPRIVILEGED);

	MNVIC_VoidEnbleInterrupt(6);
 8000fbc:	2006      	movs	r0, #6
 8000fbe:	f7ff fd09 	bl	80009d4 <MNVIC_VoidEnbleInterrupt>
	MNVIC_VoidEnbleInterrupt(7);
 8000fc2:	2007      	movs	r0, #7
 8000fc4:	f7ff fd06 	bl	80009d4 <MNVIC_VoidEnbleInterrupt>




	/* Set the call back of the external 0 */
	MEXTI_voidSetCallBack(EXTI_LINE_0,func2);
 8000fc8:	4912      	ldr	r1, [pc, #72]	; (8001014 <main+0x1c4>)
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff f9a6 	bl	800031c <MEXTI_voidSetCallBack>
	/* Set the call back of the external 1 */
	MEXTI_voidSetCallBack(EXTI_LINE_1,func1);
 8000fd0:	490f      	ldr	r1, [pc, #60]	; (8001010 <main+0x1c0>)
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff f9a2 	bl	800031c <MEXTI_voidSetCallBack>

	/* Set the source of the external interrupt 0 */
	MEXTI_voidInterruptSetPort(EXTI_LINE_0,PORTB_PIN);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff f8fa 	bl	80001d4 <MEXTI_voidInterruptSetPort>
	/* Set the source of the external interrupt 1 */
	MEXTI_voidInterruptSetPort(EXTI_LINE_1,PORTB_PIN);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff f8f6 	bl	80001d4 <MEXTI_voidInterruptSetPort>

	MEXTI_voidInterruptTrigger(EXTI_LINE_0,EXTI_ONCHANGE);
 8000fe8:	2102      	movs	r1, #2
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff f952 	bl	8000294 <MEXTI_voidInterruptTrigger>
	MEXTI_voidInterruptTrigger(EXTI_LINE_1,EXTI_ONCHANGE);
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff f94e 	bl	8000294 <MEXTI_voidInterruptTrigger>

	MEXTI_voidInterruptEnableDisable(EXTI_LINE_0,EXTI_ENABLE);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff f91c 	bl	8000238 <MEXTI_voidInterruptEnableDisable>
	MEXTI_voidInterruptEnableDisable(EXTI_LINE_1,EXTI_ENABLE);
 8001000:	2100      	movs	r1, #0
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff f918 	bl	8000238 <MEXTI_voidInterruptEnableDisable>


	Main_os();
 8001008:	f7ff fea6 	bl	8000d58 <Main_os>

//	SWITCH_CPU_AccessLevel(PRIVILEGED);

	/* */
	while(1)
 800100c:	e7fe      	b.n	800100c <main+0x1bc>
 800100e:	bf00      	nop
 8001010:	08001019 	.word	0x08001019
 8001014:	08001101 	.word	0x08001101

08001018 <func1>:




void func1(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	while (1){
			MGPIO_SetPinValue(PORTA,PIN7,GPIO_PIN_LEVEL_LOW);
 800101c:	2200      	movs	r2, #0
 800101e:	2107      	movs	r1, #7
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fc6f 	bl	8000904 <MGPIO_SetPinValue>
			MGPIO_SetPinValue(PORTA,PIN0,GPIO_PIN_LEVEL_HIGH);
 8001026:	2201      	movs	r2, #1
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fc6a 	bl	8000904 <MGPIO_SetPinValue>
			SYSTICK_voidDelayMs(1000);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f7ff fe24 	bl	8000c80 <SYSTICK_voidDelayMs>
			MGPIO_SetPinValue(PORTA,PIN0,GPIO_PIN_LEVEL_LOW);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fc61 	bl	8000904 <MGPIO_SetPinValue>
			MGPIO_SetPinValue(PORTA,PIN1,GPIO_PIN_LEVEL_HIGH);
 8001042:	2201      	movs	r2, #1
 8001044:	2101      	movs	r1, #1
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fc5c 	bl	8000904 <MGPIO_SetPinValue>
			SYSTICK_voidDelayMs(1000);
 800104c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001050:	f7ff fe16 	bl	8000c80 <SYSTICK_voidDelayMs>
			MGPIO_SetPinValue(PORTA,PIN1,GPIO_PIN_LEVEL_LOW);
 8001054:	2200      	movs	r2, #0
 8001056:	2101      	movs	r1, #1
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fc53 	bl	8000904 <MGPIO_SetPinValue>
			MGPIO_SetPinValue(PORTA,PIN2,GPIO_PIN_LEVEL_HIGH);
 800105e:	2201      	movs	r2, #1
 8001060:	2102      	movs	r1, #2
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fc4e 	bl	8000904 <MGPIO_SetPinValue>
			SYSTICK_voidDelayMs(1000);
 8001068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106c:	f7ff fe08 	bl	8000c80 <SYSTICK_voidDelayMs>
			MGPIO_SetPinValue(PORTA,PIN2,GPIO_PIN_LEVEL_LOW);
 8001070:	2200      	movs	r2, #0
 8001072:	2102      	movs	r1, #2
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fc45 	bl	8000904 <MGPIO_SetPinValue>
			MGPIO_SetPinValue(PORTA,PIN3,GPIO_PIN_LEVEL_HIGH);
 800107a:	2201      	movs	r2, #1
 800107c:	2103      	movs	r1, #3
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fc40 	bl	8000904 <MGPIO_SetPinValue>
			SYSTICK_voidDelayMs(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f7ff fdfa 	bl	8000c80 <SYSTICK_voidDelayMs>
			MGPIO_SetPinValue(PORTA,PIN3,GPIO_PIN_LEVEL_LOW);
 800108c:	2200      	movs	r2, #0
 800108e:	2103      	movs	r1, #3
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fc37 	bl	8000904 <MGPIO_SetPinValue>
			MGPIO_SetPinValue(PORTA,PIN4,GPIO_PIN_LEVEL_HIGH);
 8001096:	2201      	movs	r2, #1
 8001098:	2104      	movs	r1, #4
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fc32 	bl	8000904 <MGPIO_SetPinValue>
			SYSTICK_voidDelayMs(1000);
 80010a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a4:	f7ff fdec 	bl	8000c80 <SYSTICK_voidDelayMs>
			MGPIO_SetPinValue(PORTA,PIN4,GPIO_PIN_LEVEL_LOW);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2104      	movs	r1, #4
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fc29 	bl	8000904 <MGPIO_SetPinValue>
			MGPIO_SetPinValue(PORTA,PIN5,GPIO_PIN_LEVEL_HIGH);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2105      	movs	r1, #5
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fc24 	bl	8000904 <MGPIO_SetPinValue>
			SYSTICK_voidDelayMs(1000);
 80010bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c0:	f7ff fdde 	bl	8000c80 <SYSTICK_voidDelayMs>
			MGPIO_SetPinValue(PORTA,PIN5,GPIO_PIN_LEVEL_LOW);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2105      	movs	r1, #5
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fc1b 	bl	8000904 <MGPIO_SetPinValue>
			MGPIO_SetPinValue(PORTA,PIN6,GPIO_PIN_LEVEL_HIGH);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2106      	movs	r1, #6
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fc16 	bl	8000904 <MGPIO_SetPinValue>
			SYSTICK_voidDelayMs(1000);
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f7ff fdd0 	bl	8000c80 <SYSTICK_voidDelayMs>
			MGPIO_SetPinValue(PORTA,PIN6,GPIO_PIN_LEVEL_LOW);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2106      	movs	r1, #6
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fc0d 	bl	8000904 <MGPIO_SetPinValue>
			MGPIO_SetPinValue(PORTA,PIN7,GPIO_PIN_LEVEL_HIGH);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2107      	movs	r1, #7
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fc08 	bl	8000904 <MGPIO_SetPinValue>
			SYSTICK_voidDelayMs(1000);
 80010f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f8:	f7ff fdc2 	bl	8000c80 <SYSTICK_voidDelayMs>
			MGPIO_SetPinValue(PORTA,PIN7,GPIO_PIN_LEVEL_LOW);
 80010fc:	e78e      	b.n	800101c <func1+0x4>
	...

08001100 <func2>:

}

/* will be called when external line 0 is triggered */
void func2(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
//	MGPIO_SetPinValue(PORTA,PIN6,GPIO_PIN_LEVEL_HIGH);
//	MGPIO_SetPinValue(PORTA,PIN7,GPIO_PIN_LEVEL_HIGH);
//
//	SYSTICK_voidDelayMs(5000);

	if(IRQ_flag == 0)
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <func2+0x38>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d105      	bne.n	8001118 <func2+0x18>
	{
		TASKA_flag=1;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <func2+0x3c>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
		IRQ_flag=1;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <func2+0x38>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
	}
	if(IRQ_flag == 1)
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <func2+0x38>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d105      	bne.n	800112c <func2+0x2c>
	{
		TASKB_flag=1;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <func2+0x40>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
		IRQ_flag=0;
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <func2+0x38>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	}

}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000065 	.word	0x20000065
 800113c:	2000006c 	.word	0x2000006c
 8001140:	2000007c 	.word	0x2000007c

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 f843 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SystemInit+0x28>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <SystemInit+0x28>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SystemInit+0x28>)
 80011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ae:	609a      	str	r2, [r3, #8]
#endif
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011c6:	e003      	b.n	80011d0 <LoopCopyDataInit>

080011c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011ce:	3104      	adds	r1, #4

080011d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011d8:	d3f6      	bcc.n	80011c8 <CopyDataInit>
  ldr  r2, =_sbss
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011dc:	e002      	b.n	80011e4 <LoopFillZerobss>

080011de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011e0:	f842 3b04 	str.w	r3, [r2], #4

080011e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011e8:	d3f9      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ea:	f7ff ffd3 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ee:	f000 f825 	bl	800123c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff fe2d 	bl	8000e50 <main>
  bx  lr    
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80011fc:	080012a4 	.word	0x080012a4
  ldr  r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001204:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001208:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800120c:	20000088 	.word	0x20000088

08001210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC_IRQHandler>
	...

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000004 	.word	0x20000004
 8001238:	20000084 	.word	0x20000084

0800123c <__libc_init_array>:
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	4e0d      	ldr	r6, [pc, #52]	; (8001274 <__libc_init_array+0x38>)
 8001240:	4c0d      	ldr	r4, [pc, #52]	; (8001278 <__libc_init_array+0x3c>)
 8001242:	1ba4      	subs	r4, r4, r6
 8001244:	10a4      	asrs	r4, r4, #2
 8001246:	2500      	movs	r5, #0
 8001248:	42a5      	cmp	r5, r4
 800124a:	d109      	bne.n	8001260 <__libc_init_array+0x24>
 800124c:	4e0b      	ldr	r6, [pc, #44]	; (800127c <__libc_init_array+0x40>)
 800124e:	4c0c      	ldr	r4, [pc, #48]	; (8001280 <__libc_init_array+0x44>)
 8001250:	f000 f818 	bl	8001284 <_init>
 8001254:	1ba4      	subs	r4, r4, r6
 8001256:	10a4      	asrs	r4, r4, #2
 8001258:	2500      	movs	r5, #0
 800125a:	42a5      	cmp	r5, r4
 800125c:	d105      	bne.n	800126a <__libc_init_array+0x2e>
 800125e:	bd70      	pop	{r4, r5, r6, pc}
 8001260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001264:	4798      	blx	r3
 8001266:	3501      	adds	r5, #1
 8001268:	e7ee      	b.n	8001248 <__libc_init_array+0xc>
 800126a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800126e:	4798      	blx	r3
 8001270:	3501      	adds	r5, #1
 8001272:	e7f2      	b.n	800125a <__libc_init_array+0x1e>
 8001274:	0800129c 	.word	0x0800129c
 8001278:	0800129c 	.word	0x0800129c
 800127c:	0800129c 	.word	0x0800129c
 8001280:	080012a0 	.word	0x080012a0

08001284 <_init>:
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001286:	bf00      	nop
 8001288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128a:	bc08      	pop	{r3}
 800128c:	469e      	mov	lr, r3
 800128e:	4770      	bx	lr

08001290 <_fini>:
 8001290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001292:	bf00      	nop
 8001294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001296:	bc08      	pop	{r3}
 8001298:	469e      	mov	lr, r3
 800129a:	4770      	bx	lr
